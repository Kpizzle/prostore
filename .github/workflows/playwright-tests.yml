name: Playwright Tests

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - master

permissions:
  id-token: write
  contents: read
  pages: write
  actions: read

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            playwright-browsers-

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Create .env file
        run: |
          echo "BASE_URL=${{ secrets.BASE_URL }}" > .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env

      - name: Run Playwright tests
        run: npx playwright test
        env:
          BASE_URL: ${{ secrets.BASE_URL }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}

      - name: List files
        run: ls

      - name: Configure GitHub Pages
        uses: actions/configure-pages@v5.0.0

      - name: Generate timestamp for versioning
        run: echo "REPORT_VERSION=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_ENV

      - name: Publish HTML report
        if: always()
        uses: peaceiris/actions-gh-pages@v3.7.3
        with:
          github_token: ${{ secrets.GH_PAT }}
          publish_dir: playwright-report
          destination_dir: reports/${{ env.REPORT_VERSION }}
          keep_files: true
          user_name: github-actions[bot]
          user_email: github-actions[bot]@users.noreply.github.com

      - name: Generate index.html for reports
        run: |
          REPORTS_DIR="reports"
          INDEX_FILE="$REPORTS_DIR/index.html"

          # Create reports directory if it doesn't exist
          mkdir -p $REPORTS_DIR

          # Start the HTML file
          echo "<!DOCTYPE html>
          <html>
          <head>
            <title>Playwright Test Reports</title>
            <meta charset='UTF-8'>
          </head>
          <body>
          <h1>Playwright Test Reports</h1>
          <ul>" > $INDEX_FILE

          # Check if there are report folders before listing them
          if [ "$(ls -A $REPORTS_DIR)" ]; then
            # List all report folders and add links
            for report in $(ls -d $REPORTS_DIR/*/ | sort -r); do
              report_name=$(basename $report)
              echo "<li><a href='reports/$report_name/index.html'>$report_name</a></li>" >> $INDEX_FILE
            done
          else
            echo "<li>No reports available yet.</li>" >> $INDEX_FILE
          fi

          # Close the HTML file
          echo "</ul></body></html>" >> $INDEX_FILE

      - name: Copy latest report to a "latest" directory
        run: |
          cp -r playwright-report $GITHUB_WORKSPACE/latest-report
